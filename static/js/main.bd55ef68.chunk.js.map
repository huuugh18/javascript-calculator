{"version":3,"sources":["App.js","serviceWorker.js","index.js","NumPadBtn.js","constants.js","Calculator.js"],"names":["App","react_default","a","createElement","className","Paper_default","id","Typography_default","variant","align","src_Calculator","Chip_default","label","href","component","clickable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","NumPadButton","handleNumPadClick","_this","props","onSelect","value","react__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_6___default","this","onClick","color","size","__webpack_require__","d","__webpack_exports__","numbers","operators","Calculator","Object","C_Users_hugho_Documents_Working_Code_FreeCodeCamp_Front_End_Libraries_Projects_javascript_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_hugho_Documents_Working_Code_FreeCodeCamp_Front_End_Libraries_Projects_javascript_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_hugho_Documents_Working_Code_FreeCodeCamp_Front_End_Libraries_Projects_javascript_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","onClickNumber","curVal","state","mainDisplay","setState","onClickOperator","operator","newFormula","formulaDisplay","slice","calculated","onClickDecimal","includes","onClickClear","onClickEnter","newExp","evaluatedExp","Math","round","eval","bind","C_Users_hugho_Documents_Working_Code_FreeCodeCamp_Front_End_Libraries_Projects_javascript_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_9___default","react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_10___default","style","marginBottom","map","i","_NumPadBtn__WEBPACK_IMPORTED_MODULE_7__","key","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_8___default","fullWidth"],"mappings":"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","file":"static/js/main.bd55ef68.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport './Calculator.css'\nimport  Calculator from './Calculator'\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Paper id='title'>\n          <Typography variant='h3' align='center'>\n            CALCULON\n          </Typography>\n        </Paper>\n        <Calculator />\n        <div id='footer'>\n          <Chip\n            label={`A freeCodeCamp project by Hugh O'Neill`}\n            href='https://github.com/huuugh18'\n            component='a'\n            clickable\n          />\n        </div>          \n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nclass NumPadButton extends Component {\r\n    handleNumPadClick = () => this.props.onSelect(this.props.value)\r\n    render(){\r\n        return(\r\n            <Button \r\n                className='num-pad'\r\n                id={this.props.id}\r\n                onClick={this.handleNumPadClick}\r\n                color='primary'\r\n                variant='outlined'\r\n                size='large'\r\n            >\r\n                {this.props.value}\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumPadButton","\r\nexport const numbers = [\r\n    {id:'seven', value:'7'},\r\n    {id:'eight', value:'8'},\r\n    {id:'nine', value:'9'},\r\n    {id:'four', value:'4'},\r\n    {id:'five', value:'5'},\r\n    {id:'six', value:'6'},\r\n    {id:'one', value:'1'},\r\n    {id:'two', value:'2'},\r\n    {id:'three', value:'3'},\r\n    {id:'zero', value:'0'}\r\n  ]\r\n  export const operators= [\r\n    {id:'add', value:'+'},\r\n    {id:'subtract', value:'-'},\r\n    {id:'multiply', value:'*'},\r\n    {id:'divide', value:'/'},\r\n  ]","import React, { Component } from 'react';\r\n\r\nimport NumPadButton from './NumPadBtn'\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport {numbers,operators} from './constants'\r\n\r\nclass Calculator extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n        mainDisplay: '0',\r\n        formulaDisplay:'',\r\n        calculated: false,\r\n    }\r\n    this.onClickNumber = this.onClickNumber.bind(this)\r\n    this.onClickOperator = this.onClickOperator.bind(this)\r\n    this.onClickDecimal = this.onClickDecimal.bind(this)\r\n    this.onClickClear = this.onClickClear.bind(this)\r\n    this.onClickEnter = this.onClickEnter.bind(this)\r\n  }\r\n  onClickNumber = value => {\r\n    const curVal = this.state.mainDisplay\r\n    if (curVal === '0' || curVal === '+' || curVal === '-' || curVal === '*' || curVal === '/') {\r\n        // overide current display with new number  \r\n        return this.setState({ mainDisplay:value })\r\n    }\r\n    \r\n    // add onto currently displayed number\r\n    return this.setState({mainDisplay: this.state.mainDisplay + value})\r\n  }\r\n\r\n  onClickOperator = operator => {\r\n    const curVal = this.state.mainDisplay\r\n    // if no numbers or operator last selected then return since nothing to calculate\r\n    if (curVal === '0' || operator === curVal) {return}\r\n    // replace operotar if new operator selected\r\n    if (curVal === '+' || curVal === '-' || curVal === '*' || curVal === '/') {\r\n        const newFormula = this.state.formulaDisplay.slice(0,-1) + operator\r\n        return this.setState({\r\n            mainDisplay:operator,\r\n            formulaDisplay:newFormula\r\n        })\r\n    }\r\n    // if formula state empty, then set formula state\r\n    else if(this.state.formulaDisplay === ''){\r\n      return this.setState({\r\n        mainDisplay: operator,\r\n        formulaDisplay: this.state.mainDisplay + ' ' + operator\r\n      })\r\n    }\r\n    // if equals has been used last\r\n    else if(this.state.calculated === true){\r\n      return this.setState({\r\n        mainDisplay: operator, \r\n        calculated:false,\r\n        formulaDisplay: this.state.mainDisplay + ' ' + operator\r\n      })\r\n    }\r\n    // if formula started, then add display number and operator to formula state\r\n    this.setState({\r\n      mainDisplay: operator,\r\n      formulaDisplay: this.state.formulaDisplay + this.state.mainDisplay + ' ' + operator\r\n    })\r\n  }\r\n\r\n  onClickDecimal = () => {\r\n    // if already a decimal in the number return\r\n    const curVal = this.state.mainDisplay\r\n    if(curVal.includes('.')){return}\r\n    // otherwise add to number\r\n    return this.setState({mainDisplay:this.state.mainDisplay + '.'})\r\n  }\r\n\r\n  onClickClear = () => this.setState({ mainDisplay:'0',formulaDisplay:'',calculated:false})\r\n\r\n  onClickEnter =() => {\r\n        const newExp = this.state.formulaDisplay + ' ' + this.state.mainDisplay    \r\n        const evaluatedExp = Math.round(eval(newExp)*100000)/100000\r\n        this.setState({formulaDisplay: newExp, mainDisplay: evaluatedExp, calculated: true})\r\n  }\r\n  render() {\r\n    return (\r\n        <Paper id='calculator'>\r\n          <Alert \r\n            variant='secondary'\r\n            id='formula-display'\r\n            style={{marginBottom:0}}\r\n          >\r\n            {this.state.formulaDisplay}\r\n          </Alert>\r\n          <Alert \r\n            variant='primary' \r\n            id='display' \r\n            style={{marginBottom:0}}\r\n          >\r\n            {this.state.mainDisplay}\r\n          </Alert>\r\n          {\r\n            numbers.map(i => (\r\n              <NumPadButton\r\n                key={i.id}\r\n                id={i.id}\r\n                value={i.value} \r\n                onSelect={this.onClickNumber}\r\n              />\r\n            ))\r\n          }\r\n\r\n          {\r\n            operators.map(i => (\r\n              <NumPadButton \r\n                key={i.id}\r\n                id={i.id}\r\n                value={i.value}\r\n                onSelect={this.onClickOperator}\r\n              />\r\n            ))\r\n          }\r\n          <NumPadButton \r\n            id={'decimal'}\r\n            value={'.'}\r\n            onSelect={this.onClickDecimal}\r\n          >\r\n            .\r\n          </NumPadButton>\r\n          <div id='equals-container'>\r\n            <Button \r\n                id='equals'\r\n              onClick={this.onClickEnter}\r\n              variant='contained'\r\n              color='primary'\r\n              size='large'\r\n              fullWidth\r\n            >\r\n              =\r\n            </Button>\r\n          </div>\r\n          <div id='clear-container'>\r\n            <Button\r\n                id='clear'\r\n              onClick={this.onClickClear}\r\n              variant='contained'\r\n              size='large'\r\n              color='secondary'\r\n              fullWidth\r\n            >\r\n              AC\r\n            </Button>\r\n          </div>\r\n      </Paper>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Calculator;\r\n"],"sourceRoot":""}